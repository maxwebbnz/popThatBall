{
    "rules": {
        "users": {
            ".read": "root.child('userRoles').child(auth.uid).child('rank').val() == 'admin'",
            "$uid": {
                // Users that match the path's user Id can read and write
                ".read": "$uid === auth.uid || root.child('userRoles').child(auth.uid).child('rank').val() == 'admin'",
                ".write": "$uid === auth.uid ||  root.child('userRoles').child(auth.uid).child('rank').val() == 'admin'",
                "uid": {
                    ".validate": "true"
                },
                "profileURL": {
                    ".validate": "true"
                },
                "name": {
                    // names must be a string and must be no longer than 26
                    ".validate": "newData.isString() && newData.val().length < 26"
                },
                "email": {
                    // emails must be a string and must be no longer than 320
                    ".validate": "newData.isString() && newData.val().length < 320"
                },
                "score": {
                    // scores must be a number
                    ".validate": "newData.isNumber()"
                },
                "currentLevel": {
                    // current level must be a number
                    ".validate": "newData.isNumber()"
                },
                "highScore": {
                    // high score must be a number
                    ".validate": "newData.isNumber()"
                },
                "city": {
                    // city must be a string
                    ".validate": "newData.isString()"
                },
                "gender": {
                    // gender must be a string
                    ".validate": "newData.isString()"
                },
                "phoneNum": {
                    // phone number can  be a string due to having white space in some cases and must be no greater than 9
                    ".validate": "newData.isString() && newData.val().length < 20"
                },
                "suburb": {
                    // suburb must be a string
                    ".validate": "newData.isString()"
                },
                "gameName": {
                    ".validate": "newData.isString() && newData.val().length < 10"
                },
                "sound": {
                    ".validate": "newData.isBoolean()"
                },
                "debug": {
                    ".validate": "newData.isBoolean()"
                },
                "$other": {
                    // users should not be able to store any new data through this path.
                    ".validate": false
                }
            }
        },
        "scoreBoard": {
            ".read": "true",
            ".write": "auth != null",
            "$levelNum": {
                ".indexOn": "score",
                "$uid": {
                    ".validate": "$uid == auth.uid",
                    "name": {
                        ".validate": "newData.isString() && newData.val().length < 26"
                    },
                    "misses": {
                        ".validate": "newData.isNumber()"
                    },
                    "hits": {
                        ".validate": "newData.isNumber()"
                    },
                    "avatar": {
                        ".validate": "true"
                    }
                }
            }
        },
        "userRoles": {
            ".read": "true",
            ".write": "auth.uid == 'mHs1wfMniTeIvVlxC6XIzTkGBdg1'"
        },
        "scores": {
            "$uid": {
                ".write": "$uid === auth.uid ||  root.child('userRoles').child(auth.uid).child('rank').val() == 'admin'",
                ".read": "$uid === auth.uid || root.child('userRoles').child(auth.uid).child('rank').val() == 'admin'"
            },
            "popThatBall": {
                "misses": {
                    ".validate": "newData.isNumber()"
                },
                "hits": {
                    ".validate": "newData.isNumber()"
                },
                "score": {
                    ".validate": "newData.isNumber()"
                },
                "highScore": {
                    ".validate": "newData.isNumber()"
                }
            }
        }
    }
}